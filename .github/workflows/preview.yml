name: Deploy Preview
on:
  pull_request:
    branches: [master, main]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build site
        run: |
          cd exampleSite
          hugo --minify --gc --baseURL "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/preview/pr-${{ github.event.number }}/"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./exampleSite/public
          destination_dir: ./preview/pr-${{ github.event.number }}
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/preview/pr-${{ github.event.number }}/`;
            
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ **Deploy preview ready!**')
            );
            
            const commentBody = `üöÄ **Deploy preview ready!**
            
            üîó **Preview URL:** ${previewUrl}
            
            üìù **Changes in this PR:**
            ${{ github.event.pull_request.title }}
            
            ‚è∞ **Preview will be available until PR is closed**
            
            ---
            *This preview was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: preview-build-${{ github.event.number }}
          path: exampleSite/public/
          retention-days: 30

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting 30 seconds for GitHub Pages deployment..."
          sleep 30

      - name: Take screenshot
        uses: microsoft/playwright-github-action@v1
        with:
          browser: chromium
          args: |
            npx playwright install chromium
            node -e "
              const { chromium } = require('playwright');
              (async () => {
                const browser = await chromium.launch();
                const page = await browser.newPage();
                await page.setViewportSize({ width: 1280, height: 720 });
                
                const previewUrl = 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/preview/pr-${{ github.event.number }}/';
                console.log('üì∏ Taking screenshot of:', previewUrl);
                
                try {
                  await page.goto(previewUrl, { waitUntil: 'networkidle', timeout: 30000 });
                  await page.waitForTimeout(2000); // Wait for any animations
                  
                  // Take full page screenshot
                  await page.screenshot({ 
                    path: 'preview-screenshot.png',
                    fullPage: true 
                  });
                  
                  // Take viewport screenshot
                  await page.screenshot({ 
                    path: 'preview-viewport.png',
                    fullPage: false 
                  });
                  
                  console.log('‚úÖ Screenshots saved');
                } catch (error) {
                  console.error('‚ùå Failed to take screenshot:', error.message);
                  // Take screenshot even if page fails to load completely
                  await page.screenshot({ 
                    path: 'preview-error.png',
                    fullPage: true 
                  });
                }
                
                await browser.close();
              })();
            "

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: preview-screenshots-${{ github.event.number }}
          path: |
            preview-screenshot.png
            preview-viewport.png
            preview-error.png
          retention-days: 30

      - name: Add screenshot to PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Check if screenshot exists
              if (fs.existsSync('preview-screenshot.png')) {
                const screenshot = fs.readFileSync('preview-screenshot.png');
                
                // Upload screenshot to PR
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `üì∏ **Preview Screenshot**
                  
                  Here's a screenshot of your preview deployment:
                  
                  ![Preview Screenshot](data:image/png;base64,${screenshot.toString('base64')})
                  
                  ---
                  *Screenshot taken automatically by GitHub Actions*`
                });
                
                console.log('‚úÖ Screenshot added to PR');
              } else {
                console.log('‚ö†Ô∏è Screenshot file not found');
              }
            } catch (error) {
              console.error('‚ùå Failed to add screenshot to PR:', error.message);
            } 